#!/bin/python3
"""
This script reads files with posterior probabilities (PP) and AC, generated by rule-5 (`smk_05_assess_phasing.sh`), 
and creates plots to assess the quality of phasing based solely on PP.
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

work_dir="FIXTHIS/phasing_assessment"
TAG='FIXTHIS'
threshold_AC = 79 # FIXTHIS - should be 2*N*0.0001
minCHR=1 # change for debugging

def get_counts_from_df( df, ac, cutoffs = np.linspace(0.5,1,51) ):
    meanPP = np.array([ np.mean(df.loc[x][2]) for x in df.index.unique() ])
    num_retained = [ np.sum( meanPP >= pp ) for pp in cutoffs ]
    print(f"Proportion of MAC={ac} variants with PP=0.5: {100*np.sum(meanPP<0.55)/len(meanPP):.2f}% (m={np.sum(meanPP<0.55)})") 
    return num_retained 

cutoffs = np.linspace(0.5,1,51)
num_retained = {}
for ac in range(4):
    num_retained[ac] = np.zeros(len(cutoffs))

## read all the PP files ##
for C in range(minCHR,23):        
    df = pd.read_csv(f"{work_dir}/{TAG}.pp.chr{C}.maf00015.pp0.50.gz", sep='\s+', header=None, na_values='.')  
    # remember that PP=1 for "common" variants, ie those with MAF>0.001
    df.loc[ df.index[df[2].isna()], 2] = 1 # replace missing values with ones
    PPs = df.groupby([0])[[2]].agg(lambda col: np.nanmean(col))[2].values
    num_retained[0] += [ np.sum( PPs >= pp ) for pp in cutoffs ]
    print(f"{C}: Proportion of MAF<0.001 variants with PP>0.90: {100*np.sum(PPs>0.9)/len(PPs):.2f}% (m={np.sum(PPs>0.9)})") 
    
    for ac in range(1,4):
        df = pd.read_csv(f"{work_dir}/{TAG}.pp.chr{C}.mac{ac}.gz", sep='\s+', header=None, index_col=[0] )
        if ac==1:
            num_retained[ac] += [ np.sum( df[2].values >= pp ) for pp in cutoffs ]
        else:
            num_retained[ac] += get_counts_from_df( df, ac=ac )

## plot a 2x2 grid with the PP distribution ##
f, ax = plt.subplots( 2, 2, figsize=(8,8), dpi=100 )

ax[0,0].plot( cutoffs, np.log10(num_retained[1]) )
ax[0,1].plot( cutoffs, np.log10(num_retained[2]) )
ax[1,0].plot( cutoffs, np.log10(num_retained[3]) )
ax[1,1].plot( cutoffs, np.log10(num_retained[0]) )

num_retained[4] = num_retained[0]
for i in range(4):
    ax[i//2, i %2].set_title("MAC={0}".format(i+1))
    ax[i//2, i %2].axvline(0.90, linestyle='--', alpha=0.2, color='red', label="PP$\geq$0.90:{0:.0f}".format(num_retained[i+1][ int(np.where(cutoffs==0.9)[0]) ]))
    ax[i//2, i %2].axvline(0.99, linestyle='--', alpha=0.5, label="PP$\geq$0.99:{0:.0f}".format(num_retained[i+1][ int(np.where(cutoffs==0.99)[0]) ]))
    ax[i//2, i %2].legend()
    
ax[1,1].set_title("All (MAC>0)".format(i+1))
ax[0,0].set_ylabel("Variants retained", fontsize=13)
ax[1,0].set_ylabel("Variants retained", fontsize=13)
plt.savefig(f'phasing.{TAG}.PP_grid.png', transparent=True)


## repeat for a PP vs AC plot
ac_bins = [ 0, 1, 2, 3, 5, 7, 10, 15, *np.linspace(20,80,7).astype(int) ] # TODO: adjust this list
bin_sizes = np.zeros(len(ac_bins)-1)
bin_PPs   = np.zeros(len(ac_bins)-1)

bad_cases = {}
for C in range(minCHR,23):
    df_pp = pd.read_csv(f"{work_dir}/{TAG}.pp.chr{C}.maf00015.pp0.50.gz", sep='\s+', header=None, names=["fullid","GT","PP"], na_values='.')

    tmp = len(df_pp)
    df_pp = df_pp[ df_pp.PP != '.' ]
    print(f"PP info loaded for {tmp} alleles, of which {df_pp.PP.notna().sum()} are not NA.")
    df_pp.PP = df_pp.PP.astype(float)
    
    df_new = df_pp.groupby(['fullid'])[['PP']].agg(lambda col: [np.nanmean(col), len(col)] )
    df_new["PP"] = [x[0] for x in df_new.PP.values] 

    # read the AC considering the whole cohort
    df_snp_all = pd.read_csv(f"{work_dir}/{TAG}.notrios.chr{C}.snpinfo", sep='\t', header=None, index_col=[0])
    comn = np.intersect1d( df_snp_all.index, df_new.index) 
    df_new['AC'] = df_snp_all.loc[comn,3].values

    bad_cases[C] = df_new.query( 'AC > @threshold_AC and PP<=0.90' ).copy()
    
    for i in range(len(ac_bins)-1):
        low = ac_bins[i]
        high = ac_bins[i+1]
        temp = df_new.query( ' AC> @low and AC <= @high ')
        bin_PPs[i] += temp.PP.sum()
        bin_sizes[i] += temp.shape[0]
        
for x in bad_cases:
    if len(bad_cases[x])>0:
        print("Something's wrong with",x,len(bad_cases[x]))

f, ax = plt.subplots()
ax.plot( ac_bins[1:], bin_PPs / bin_sizes, '-o', label="Mean" )
ax.set_xlabel("Allele count (binned for larger values)", fontsize=13)
ax.set_ylabel(f"{TAG} | chroms {minCHR}-22 | ({np.sum(bin_sizes)/1e6:.2f}m)", fontsize=13)
ax.set_xlim(0,81)
ax.spines['top'].set_visible(False); ax.spines['right'].set_visible(False)
ax.set_title( f"Phasing posterior probability stratified by AC")
plt.savefig(f'phasing.{TAG}.PP_by_AC.png', transparent=True)

# end-of-script